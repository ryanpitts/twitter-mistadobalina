[
    {
        "author": "Scott Kellum", 
        "description": "Beautifully designed longform articles are a hot topic right now but making them work efficiently and at scale is still a hard problem to solve. At Vox Media we have been building and refining longform journalism and art directed posts for years in a way that we can do a lot of big things at a large scale without putting a strain on our designers and developers. This talk will go into the evolution of our art directed posts at Vox Media and our process around them.", 
        "id": 3597, 
        "submitted_at": "2014-05-23T16:02:50.278Z", 
        "title": "Art directing posts, sustainably"
    }, 
    {
        "author": "Matt Boggie / Alexis Lloyd", 
        "description": "Anyone who’s written for the web has encountered content management systems: complex monoliths of templates, business rules and workflow that take words and media and transform them into the pages and articles our readers see. Anyone who has worked with these systems for long is also familiar with their flaws, their temperamental assumptions about the world, their frustrating constraints, their sometimes-incomprehensible syntax and controls. Even when they work well, they are monolithic systems that represent fossilizations of earlier processes, and are painful to augment and extend.\r\n\r\nThis session will be to convene a discussion about what’s wrong with CMSes -- both the systems themselves and the very concept of CMS -- and some possible solutions. What could be possible when we begin to think beyond the CMS as we know it? What systems or protocols could we create that might not be subject to the same problems and limitations? The New York Times R&D Lab will also present some early work showing what an (admittedly futuristic) alternative could look like.", 
        "id": 3578, 
        "submitted_at": "2014-05-23T02:18:00.940Z", 
        "title": "There Is No CMS"
    }, 
    {
        "author": "Emma Carew Grovum, Sisi Wei", 
        "description": "The need for more diversity in journalism, specifically in web/coding/tech teams, is indisputable. Let's talk solutions and find tangible things we can do and encourage others to do to make a difference. What's worked for people who have had success? What can we try with our next mentee, hire, or opportunity to recommend a speaker? For newsrooms to actually become more diverse, everyone needs to contribute: hiring, managing, promoting, mentoring, teaching, and just generally creating a culture that is welcoming and open. \r\n", 
        "id": 3574, 
        "submitted_at": "2014-05-22T22:34:33.025Z", 
        "title": "How to diversify the pipeline of journo-coders"
    }, 
    {
        "author": "Mike Dewar, Nik Hanselman, Jacqui Maher", 
        "description": "How do you deal with LIVE data? How do you explore it, use it, and shape it into something useful? Streamtools provides a friendly interface that lets you explore live sources of data without having to perform complex infrastructure tasks. \r\n\r\nThis workshop will introduce the basics of using streamtools:\r\ninterrogate live sources of data\r\nbuild systems to track, aggregate and learn from various sources of data\r\nimport / export processing patterns and explore the streamtools API\r\nhook into existing systems and create new streams of data\r\n\r\nall from within a browser-based graphical interface!", 
        "id": 3571, 
        "submitted_at": "2014-05-22T21:44:11.050Z", 
        "title": "hands-on: wrangling live data the easy way with streamtools"
    }, 
    {
        "author": "Derek Willis", 
        "description": "Data about people is all around us. It also comes in countless varieties of formats, with \"unique\" identifiers that aren't or no identification system at all. We all have to deal with people data in our reporting and applications. How do we do it? What are the best (and worst) tools and libraries? What about determining gender? This session is designed to unearth the practices that we use for handling personal identifiers and to find the best ones or to figure out where the unmet needs are, and try to start solving them. Open to any and all languages and platforms.", 
        "id": 3499, 
        "submitted_at": "2014-05-23T01:27:53.803Z", 
        "title": "Sartre Was Wrong: Hell is Data About Other People"
    }
]